/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package threadsfinal;

import java.util.Collections;
import java.util.List;

/**
 *
 * @author errol
 */
//A Java class Sorter that inherits from the Runnable interface. Override and implement the classes run() method 
//in which the thread runs every 5 milliseconds and sorts the array or similar data structure filled by the Generator thread. 
//It must only attempt to perform the sort if the array is of size 10 and has been freshly generated by the Generator thread. (1.5 pts)
public class Sorter implements Runnable {

    private final Simulation simulation;

    public Sorter(Simulation simulation) {
        this.simulation = simulation;
    }

    private void sortArray() {
        synchronized (simulation) {
            // Only sort if the array has exactly 10 elements
            if (simulation.getArraySize() == 10) {
                List<Integer> arrayList = simulation.getArray();
                Collections.sort(arrayList);  // Sort the ArrayList using Collections.sort()
                System.out.println("Array sorted: " + arrayList);

                // Set the array as sorted and notify all waiting threads once
                simulation.setSorted(true);
                simulation.notifyAll();  // This should only be called once

            }
        }
    }

    @Override
    public void run() {
        while (true) {
            synchronized (simulation) {
                try {


                    // Wait until the array is filled with 10 elements
                    while (simulation.getArraySize() != 10) {
                        simulation.wait();  // Wait until the array is of size 10
                    }

                    // Perform sorting when the condition is met
                    sortArray();

                } catch (InterruptedException e) {
                    System.out.println("Sorter thread interrupted: " + e.getMessage());
                    Thread.currentThread().interrupt();
                }
            }

            // Sleep for 5 milliseconds between iterations
            try {
                Thread.sleep(5);
            } catch (InterruptedException e) {
                System.out.println("Sorter interrupted: " + e.getMessage());
                Thread.currentThread().interrupt();
                break;
            }
        }
    }
}
